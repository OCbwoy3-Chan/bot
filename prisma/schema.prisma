// wtf??

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = "file:./dev.db"
}

// Bans

model RobloxUserBan {
    userId        String  @id @unique
    reason        String
    bannedUntil   String // UNIX seconds, -1 = Banned FOREVER
    privateReason String?
    moderatorId   String
    moderatorName String
    bannedFrom    String  @default("All") // SB, OCbwoy3sMultiverse, All // ! DEPRECATED
    hackBan       Boolean @default(false)
    noFederate    Boolean @default(false)
}

// AI - EU Law Compliance

model RobloxUserBan_AIReasoning {
    userId          String  @id @unique
    reason          String
    comment         String
    justified       Boolean
    originalReason  String
    banProviderData String
}

// TODO: Nova Sync
model RobloxUserBan_ThirdPartyFed {
    userId       String
    banHandlerId String
    reason       String
    moderatorId  String?

    @@id([userId, banHandlerId])
    @@ignore
}

// Appeals

model RobloxUserAppeal {
    robloxUserId  String @id @unique
    ipAddress     String @unique
    email         String @unique
    appealMessage String
}

// Guild Config

model GuildSetting {
	id String @id @unique
	language String? // default en-US
}

// Whitelists

model Whitelist {
    id     String  @id @unique
    hidden Boolean @default(false)
}

model Whitelist_RobloxUser {
    robloxId  String  @id @unique
    discordId String
    hidden    Boolean @default(false)
}

model Whitelist_OCbwoy3ChanAI {
    id     String  @id @unique
    hidden Boolean @default(false)
}

model Whitelist_OCbwoy3ChanAI_ChannelSpecific {
    id     String  @id @unique
}

// AI Configs

model OCbwoy3ChanAI_ChannelSettings {
    id           String  @id @unique
    forcedPrompt String?
}

model OCbwoy3ChanAI_GuildSettings {
    id           String  @id @unique
    forcedPrompt String?
}

// AI Data

model OCbwoy3ChanAI_UserMemory {
    id     String @id @unique @default(cuid())
    user   String
    memory String
}

// Forms

model Form {
    id        String @id @unique @default(cuid())
    questions String
    authorId  String
}

model FormResponse {
    id           String @id @unique @default(cuid())
    formId       String
    respondentId String
    ipAddress    String
    answers      String
}

// Test

model VDWorld {
    name               String
    worldGeneratorType String  @default("FLAT") // FLAT
    worldGeneratorSeed BigInt  @default(0)
    id                 String  @id @unique @default(uuid())
    jobidLock          String?
}

model VDWorldChunk {
    worldId String
    chunkX  Int
    chunkY  Int
    chunkZ  Int
    data    String // binary data compressed with zlib + huffman encoding

    @@id([worldId, chunkX, chunkY, chunkZ])
}
